version: 2.1

orbs:
  snyk: snyk/snyk@0.0.8

executors:
  vm:
    machine:
      image: ubuntu-2004:202111-02
    resource_class: large
    environment:
      GOLANG_VERSION: 1.16.12
      NOTARY_VERSION: 0.6.1
      KUBECTL_VERSION: 1.21.5
      K3D_VERSION: 4.4.8
      HELMFILE_VERSION: 0.129.3
      HELM_VERSION: 3.3.1
      TERRAFORM_VERSION: 1.1.2
      GOPATH: /home/circleci/go
      GO111MODULE: "on"
      DOCKER_CLI_EXPERIMENTAL: enabled
    working_directory: /home/circleci/go/src/github.com/patoarvizu/amphibian
  vm-arm:
    machine:
      image: ubuntu-2004:202111-02
    resource_class: arm.medium
    environment:
      GOLANG_VERSION: 1.16.12
      NOTARY_VERSION: 0.6.1
      KUBECTL_VERSION: 1.21.5
      K3D_VERSION: 4.4.8
      HELMFILE_VERSION: 0.129.3
      HELM_VERSION: 3.3.1
      TERRAFORM_VERSION: 1.1.2
      GOPATH: /home/circleci/go
      GO111MODULE: "on"
      DOCKER_CLI_EXPERIMENTAL: enabled
    working_directory: /home/circleci/go/src/github.com/patoarvizu/amphibian

jobs:
  test:
    executor: vm
    steps:
    - checkout
    - restore_cache:
        keys:
          - amphibian-golang-cache-{{ checksum "go.sum" }}
    - run:
        name: Install golang
        command: |
          sudo rm -rf /usr/local/go
          curl -Lo go.linux-amd64.tar.gz "https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz"
          sudo tar -C /usr/local -xzf go.linux-amd64.tar.gz
          mkdir -p ${HOME}/go/bin
          echo 'export PATH="$GOPATH/bin:$PATH"' >> "${BASH_ENV}"
    - run:
        name: Build image
        command: |
          docker buildx create --name cci-builder --use
          docker buildx build --progress=plain --platform=linux/amd64 --load . -t patoarvizu/amphibian:latest
    - snyk/scan:
        docker-image-name: patoarvizu/amphibian:latest
        fail-on-issues: true
        project: patoarvizu/amphibian
        severity-threshold: low
    - run:
        name: Install kubectl
        command: |
          curl -Lo kubectl "https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          mkdir -p "${HOME}/.kube"
          touch "${HOME}/.kube/config"
    - run:
        name: Install k3d
        command: |
          wget -q -O - https://raw.githubusercontent.com/rancher/k3d/main/install.sh | TAG=v${K3D_VERSION} bash
    - run:
        name: Install Helm
        command: |
          wget https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz
          tar -zxvf helm-v${HELM_VERSION}-linux-amd64.tar.gz
          chmod +x linux-amd64/helm
          sudo mv linux-amd64/helm /usr/local/bin/
    - run:
        name: Install helmfile
        command: |
          curl -L https://github.com/roboll/helmfile/releases/download/v${HELMFILE_VERSION}/helmfile_linux_amd64 -o helmfile
          chmod +x helmfile
          sudo mv helmfile /usr/local/bin
    - run:
        name: Install terraform
        command: |
          curl -L https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip -o terraform.zip
          unzip terraform.zip
          chmod +x terraform
          sudo mv terraform /usr/local/bin
    - run:
        name: Setup environment
        command: |
          export KUBECONFIG=~/.k3d/k3s-default-config
          k3d cluster create --image rancher/k3s:v1.21.8-k3s1 --port 8500:30058@server[0] # --k3s-server-arg "--kube-apiserver-arg=feature-gates=ServerSideApply=false"
          k3d image import patoarvizu/amphibian:latest
          cd test/consul && helmfile sync
          cd ../consul-service && helmfile sync
          export CONSUL_HTTP_TOKEN=$(kubectl -n consul get secret consul-bootstrap-acl-token -o json | jq -r '.data.token' | base64 -d)
          cd ../consul-state && terraform init && terraform apply -auto-approve
          export AMP_CONSUL_TOKEN=${CONSUL_HTTP_TOKEN}
          cd ../secrets && helmfile sync
          cd ../amphibian && helmfile sync
    - run:
        name: Run tests
        command: |
          export KUBECONFIG=~/.k3d/k3s-default-config
          go test github.com/patoarvizu/amphibian/test/e2e -v -count=1
    - save_cache:
        key: amphibian-golang-cache-{{ checksum "go.sum" }}
        paths:
          - /home/circleci/go/pkg/mod/cache

  build-and-push-amd64-image:
    executor: vm
    steps:
    - checkout
    - run:
        name: Install notary
        command: |
          curl -L https://github.com/theupdateframework/notary/releases/download/v${NOTARY_VERSION}/notary-Linux-amd64 -o notary
          chmod +x notary
          sudo mv notary /usr/local/bin
    - run:
        name: Log in to Docker Hub
        command: |
          docker login --username $DOCKER_HUB_USER --password $DOCKER_HUB_ACCESS_TOKEN
    - run:
        name: Build and push amd64 image
        command: |
          docker buildx create --name cci-builder --use
          echo $ENCODED_NOTARY_ROLE_KEY | base64 -d > ${HOME}/amphibian-circleci.key
          export NOTARY_DELEGATION_PASSPHRASE=$NOTARY_ROLE_PASSPHRASE
          notary -s https://notary.docker.io -d ~/.docker/trust key import ${HOME}/amphibian-circleci.key --role amphibian-circleci
          export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$NOTARY_DELEGATION_PASSPHRASE
          OPERATOR_BUILD_ARGS="--build-arg GIT_COMMIT=$CIRCLE_SHA1 --build-arg GIT_TAG=$CIRCLE_TAG --build-arg COMMIT_TIMESTAMP=$(git log -1 --format=%at) --build-arg AUTHOR_EMAIL=$(git log -1 --format=%ae) --build-arg SIGNATURE_KEY=$(git log -1 --format=%GK)"
          export DOCKER_CONTENT_TRUST=1
          VERSION=${CIRCLE_TAG:-latest}
          docker buildx build --progress=plain --platform=linux/amd64 --load $OPERATOR_BUILD_ARGS . -t patoarvizu/amphibian:latest-amd64 -t patoarvizu/amphibian:$CIRCLE_SHA1-amd64 -t patoarvizu/amphibian:$VERSION-amd64
          docker push patoarvizu/amphibian:latest-amd64
          docker push patoarvizu/amphibian:$CIRCLE_SHA1-amd64
          docker push patoarvizu/amphibian:$VERSION-amd64
        no_output_timeout: 30m

  build-arm64-image:
    executor: vm-arm
    steps:
    - checkout
    - run:
        name: Build arm64 image
        command: |
          docker buildx create --name cci-builder --use
          OPERATOR_BUILD_ARGS="--build-arg GIT_COMMIT=$CIRCLE_SHA1 --build-arg GIT_TAG=$CIRCLE_TAG --build-arg COMMIT_TIMESTAMP=$(git log -1 --format=%at) --build-arg AUTHOR_EMAIL=$(git log -1 --format=%ae) --build-arg SIGNATURE_KEY=$(git log -1 --format=%GK)"
          docker buildx build --progress=plain --platform=linux/arm64 --cache-to=type=local,dest=/tmp/latest-arm64-cache,mode=max $OPERATOR_BUILD_ARGS . -t patoarvizu/amphibian:latest-arm64
    - persist_to_workspace:
        root: /tmp/
        paths:
        - latest-arm64-cache

  push-arm64-image:
    executor: vm
    steps:
    - checkout
    - attach_workspace:
        at: /tmp/
    - run:
        name: Install notary
        command: |
          curl -L https://github.com/theupdateframework/notary/releases/download/v0.6.1/notary-Linux-amd64 -o notary
          chmod +x notary
          sudo mv notary /usr/local/bin
    - run:
        name: Log in to Docker Hub
        command: |
          docker login --username $DOCKER_HUB_USER --password $DOCKER_HUB_ACCESS_TOKEN
    - run:
        name: Sign and push arm64 image
        command: |
          sudo apt-get update
          sudo apt-get install qemu-user -y
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --name cci-builder --use
          echo $ENCODED_NOTARY_ROLE_KEY | base64 -d > ${HOME}/amphibian-circleci.key
          export NOTARY_DELEGATION_PASSPHRASE=$NOTARY_ROLE_PASSPHRASE
          notary -s https://notary.docker.io -d ~/.docker/trust key import ${HOME}/amphibian-circleci.key --role amphibian-circleci
          export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$NOTARY_DELEGATION_PASSPHRASE
          OPERATOR_BUILD_ARGS="--build-arg GIT_COMMIT=$CIRCLE_SHA1 --build-arg GIT_TAG=$CIRCLE_TAG --build-arg COMMIT_TIMESTAMP=$(git log -1 --format=%at) --build-arg AUTHOR_EMAIL=$(git log -1 --format=%ae) --build-arg SIGNATURE_KEY=$(git log -1 --format=%GK)"
          export DOCKER_CONTENT_TRUST=1
          VERSION=${CIRCLE_TAG:-latest}
          docker buildx build --progress=plain --platform=linux/arm64 --cache-from=type=local,src=/tmp/latest-arm64-cache --load $OPERATOR_BUILD_ARGS . -t patoarvizu/amphibian:latest-arm64
          docker tag patoarvizu/amphibian:latest-arm64 patoarvizu/amphibian:$CIRCLE_SHA1-arm64
          docker tag patoarvizu/amphibian:latest-arm64 patoarvizu/amphibian:$VERSION-arm64
          docker push patoarvizu/amphibian:latest-arm64
          docker push patoarvizu/amphibian:$CIRCLE_SHA1-arm64
          docker push patoarvizu/amphibian:$VERSION-arm64
        no_output_timeout: 60m

  push-multi-arch:
    executor: vm
    steps:
    - checkout
    - run:
        name: Install notary
        command: |
          curl -L https://github.com/theupdateframework/notary/releases/download/v${NOTARY_VERSION}/notary-Linux-amd64 -o notary
          chmod +x notary
          sudo mv notary /usr/local/bin
    - run:
        name: Push multi-arch images
        command: |
          sudo apt-get update
          sudo apt-get install qemu-user -y
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --name cci-builder --use
          docker login --username $DOCKER_HUB_USER --password $DOCKER_HUB_ACCESS_TOKEN
          echo $ENCODED_NOTARY_ROLE_KEY | base64 -d > ${HOME}/amphibian-circleci.key
          export NOTARY_DELEGATION_PASSPHRASE=$NOTARY_ROLE_PASSPHRASE
          notary -s https://notary.docker.io -d ~/.docker/trust key import ${HOME}/amphibian-circleci.key --role amphibian-circleci
          export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$NOTARY_DELEGATION_PASSPHRASE
          OPERATOR_BUILD_ARGS="--build-arg GIT_COMMIT=$CIRCLE_SHA1 --build-arg GIT_TAG=$CIRCLE_TAG --build-arg COMMIT_TIMESTAMP=$(git log -1 --format=%at) --build-arg AUTHOR_EMAIL=$(git log -1 --format=%ae) --build-arg SIGNATURE_KEY=$(git log -1 --format=%GK)"
          export DOCKER_CONTENT_TRUST=1
          VERSION=${CIRCLE_TAG:-latest}
          docker buildx build --progress=plain --platform=linux/arm64 --load $OPERATOR_BUILD_ARGS . -t patoarvizu/amphibian:latest-arm64 -t patoarvizu/amphibian:$CIRCLE_SHA1-arm64 -t patoarvizu/amphibian:$VERSION-arm64
          docker buildx build --progress=plain --platform=linux/arm/v7 --load $OPERATOR_BUILD_ARGS . -t patoarvizu/amphibian:latest-arm7 -t patoarvizu/amphibian:$CIRCLE_SHA1-arm7 -t patoarvizu/amphibian:$VERSION-arm7
          docker push patoarvizu/amphibian:latest-arm64
          docker push patoarvizu/amphibian:$CIRCLE_SHA1-arm64
          docker push patoarvizu/amphibian:$VERSION-arm64
          docker push patoarvizu/amphibian:latest-arm7
          docker push patoarvizu/amphibian:$CIRCLE_SHA1-arm7
          docker push patoarvizu/amphibian:$VERSION-arm7
          docker buildx build --progress=plain --platform=linux/amd64,linux/arm64,linux/arm/v7 --push $OPERATOR_BUILD_ARGS . -t patoarvizu/amphibian:latest -t patoarvizu/amphibian:$CIRCLE_SHA1 -t patoarvizu/amphibian:$VERSION
          DIGEST=$(docker buildx imagetools inspect patoarvizu/amphibian:$CIRCLE_SHA1 | grep Digest | cut -d':' -f3)
          LENGTH=$(( $(docker buildx imagetools inspect patoarvizu/amphibian:$CIRCLE_SHA1 --raw | wc -c) - 1 ))
          export NOTARY_AUTH=$(echo $DOCKER_HUB_USER:$DOCKER_HUB_ACCESS_TOKEN | base64)
          notary -s https://notary.docker.io -d ~/.docker/trust addhash -p docker.io/patoarvizu/amphibian latest $LENGTH --sha256 $DIGEST -r targets/releases
          notary -s https://notary.docker.io -d ~/.docker/trust addhash -p docker.io/patoarvizu/amphibian $CIRCLE_SHA1 $LENGTH --sha256 $DIGEST -r targets/releases
          notary -s https://notary.docker.io -d ~/.docker/trust addhash -p docker.io/patoarvizu/amphibian $VERSION $LENGTH --sha256 $DIGEST -r targets/releases
        no_output_timeout: 30m

workflows:
  version: 2
  build-operator:
    jobs:
    - test:
        context: authentication-tokens
        filters:
          tags:
            only: /^v\d+\.\d+.\d+$/
    - build-and-push-amd64-image:
        requires:
        - test
        context: authentication-tokens
        filters:
          tags:
            only: /^v\d+\.\d+.\d+$/
    - build-arm64-image:
        requires:
        - test
        filters:
          tags:
            only: /^v\d+\.\d+.\d+$/
    - push-arm64-image:
        requires:
        - build-arm64-image
        context: authentication-tokens
        filters:
          tags:
            only: /^v\d+\.\d+.\d+$/
    # - push-multi-arch:
    #     requires:
    #     - test
    #     context: authentication-tokens
    #     filters:
    #       branches:
    #         ignore: /^.*$/
    #         only: /^main$/
    #       tags:
    #         only: /^v\d+\.\d+.\d+$/